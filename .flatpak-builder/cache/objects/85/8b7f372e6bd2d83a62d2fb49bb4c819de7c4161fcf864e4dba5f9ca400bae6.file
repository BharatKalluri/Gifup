/* Gifup.c generated by valac 0.40.3, the Vala compiler
 * generated from Gifup.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>


#define GIFUP_TYPE_GIFUP_APP (gifup_gifup_app_get_type ())
#define GIFUP_GIFUP_APP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIFUP_TYPE_GIFUP_APP, GifupGifupApp))
#define GIFUP_GIFUP_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GIFUP_TYPE_GIFUP_APP, GifupGifupAppClass))
#define GIFUP_IS_GIFUP_APP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIFUP_TYPE_GIFUP_APP))
#define GIFUP_IS_GIFUP_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GIFUP_TYPE_GIFUP_APP))
#define GIFUP_GIFUP_APP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GIFUP_TYPE_GIFUP_APP, GifupGifupAppClass))

typedef struct _GifupGifupApp GifupGifupApp;
typedef struct _GifupGifupAppClass GifupGifupAppClass;
typedef struct _GifupGifupAppPrivate GifupGifupAppPrivate;

#define GIFUP_TYPE_WINDOW (gifup_window_get_type ())
#define GIFUP_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIFUP_TYPE_WINDOW, GifupWindow))
#define GIFUP_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GIFUP_TYPE_WINDOW, GifupWindowClass))
#define GIFUP_IS_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIFUP_TYPE_WINDOW))
#define GIFUP_IS_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GIFUP_TYPE_WINDOW))
#define GIFUP_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GIFUP_TYPE_WINDOW, GifupWindowClass))

typedef struct _GifupWindow GifupWindow;
typedef struct _GifupWindowClass GifupWindowClass;
enum  {
	GIFUP_GIFUP_APP_0_PROPERTY,
	GIFUP_GIFUP_APP_NUM_PROPERTIES
};
static GParamSpec* gifup_gifup_app_properties[GIFUP_GIFUP_APP_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _GifupGifupApp {
	GtkApplication parent_instance;
	GifupGifupAppPrivate * priv;
};

struct _GifupGifupAppClass {
	GtkApplicationClass parent_class;
};

struct _GifupGifupAppPrivate {
	GifupWindow* window;
};


static gpointer gifup_gifup_app_parent_class = NULL;

GType gifup_gifup_app_get_type (void) G_GNUC_CONST;
GType gifup_window_get_type (void) G_GNUC_CONST;
#define GIFUP_GIFUP_APP_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GIFUP_TYPE_GIFUP_APP, GifupGifupAppPrivate))
GifupGifupApp* gifup_gifup_app_new (void);
GifupGifupApp* gifup_gifup_app_construct (GType object_type);
static void gifup_gifup_app_real_activate (GApplication* base);
GifupWindow* gifup_window_new (void);
GifupWindow* gifup_window_construct (GType object_type);
gint gifup_gifup_app_main (gchar** args,
                           int args_length1);
static void gifup_gifup_app_finalize (GObject * obj);


GifupGifupApp*
gifup_gifup_app_construct (GType object_type)
{
	GifupGifupApp * self = NULL;
#line 7 "/run/build/gifup/src/Gifup.vala"
	self = (GifupGifupApp*) g_object_new (object_type, "application-id", "com.github.bharatkalluri.gifup", "flags", G_APPLICATION_FLAGS_NONE, NULL);
#line 6 "/run/build/gifup/src/Gifup.vala"
	return self;
#line 79 "Gifup.c"
}


GifupGifupApp*
gifup_gifup_app_new (void)
{
#line 6 "/run/build/gifup/src/Gifup.vala"
	return gifup_gifup_app_construct (GIFUP_TYPE_GIFUP_APP);
#line 88 "Gifup.c"
}


static void
gifup_gifup_app_real_activate (GApplication* base)
{
	GifupGifupApp * self;
	GifupWindow* _tmp0_;
#line 13 "/run/build/gifup/src/Gifup.vala"
	self = (GifupGifupApp*) base;
#line 14 "/run/build/gifup/src/Gifup.vala"
	_tmp0_ = gifup_window_new ();
#line 14 "/run/build/gifup/src/Gifup.vala"
	g_object_ref_sink (_tmp0_);
#line 14 "/run/build/gifup/src/Gifup.vala"
	_g_object_unref0 (self->priv->window);
#line 14 "/run/build/gifup/src/Gifup.vala"
	self->priv->window = _tmp0_;
#line 107 "Gifup.c"
}


gint
gifup_gifup_app_main (gchar** args,
                      int args_length1)
{
	gint result = 0;
	GifupGifupApp* app = NULL;
	GifupGifupApp* _tmp0_;
#line 18 "/run/build/gifup/src/Gifup.vala"
	_tmp0_ = gifup_gifup_app_new ();
#line 18 "/run/build/gifup/src/Gifup.vala"
	app = _tmp0_;
#line 19 "/run/build/gifup/src/Gifup.vala"
	result = g_application_run ((GApplication*) app, args_length1, args);
#line 19 "/run/build/gifup/src/Gifup.vala"
	_g_object_unref0 (app);
#line 19 "/run/build/gifup/src/Gifup.vala"
	return result;
#line 128 "Gifup.c"
}


int
main (int argc,
      char ** argv)
{
#line 17 "/run/build/gifup/src/Gifup.vala"
	return gifup_gifup_app_main (argv, argc);
#line 138 "Gifup.c"
}


static void
gifup_gifup_app_class_init (GifupGifupAppClass * klass)
{
#line 4 "/run/build/gifup/src/Gifup.vala"
	gifup_gifup_app_parent_class = g_type_class_peek_parent (klass);
#line 4 "/run/build/gifup/src/Gifup.vala"
	g_type_class_add_private (klass, sizeof (GifupGifupAppPrivate));
#line 4 "/run/build/gifup/src/Gifup.vala"
	((GApplicationClass *) klass)->activate = (void (*) (GApplication *)) gifup_gifup_app_real_activate;
#line 4 "/run/build/gifup/src/Gifup.vala"
	G_OBJECT_CLASS (klass)->finalize = gifup_gifup_app_finalize;
#line 153 "Gifup.c"
}


static void
gifup_gifup_app_instance_init (GifupGifupApp * self)
{
#line 4 "/run/build/gifup/src/Gifup.vala"
	self->priv = GIFUP_GIFUP_APP_GET_PRIVATE (self);
#line 162 "Gifup.c"
}


static void
gifup_gifup_app_finalize (GObject * obj)
{
	GifupGifupApp * self;
#line 4 "/run/build/gifup/src/Gifup.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GIFUP_TYPE_GIFUP_APP, GifupGifupApp);
#line 5 "/run/build/gifup/src/Gifup.vala"
	_g_object_unref0 (self->priv->window);
#line 4 "/run/build/gifup/src/Gifup.vala"
	G_OBJECT_CLASS (gifup_gifup_app_parent_class)->finalize (obj);
#line 176 "Gifup.c"
}


GType
gifup_gifup_app_get_type (void)
{
	static volatile gsize gifup_gifup_app_type_id__volatile = 0;
	if (g_once_init_enter (&gifup_gifup_app_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (GifupGifupAppClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gifup_gifup_app_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GifupGifupApp), 0, (GInstanceInitFunc) gifup_gifup_app_instance_init, NULL };
		GType gifup_gifup_app_type_id;
		gifup_gifup_app_type_id = g_type_register_static (gtk_application_get_type (), "GifupGifupApp", &g_define_type_info, 0);
		g_once_init_leave (&gifup_gifup_app_type_id__volatile, gifup_gifup_app_type_id);
	}
	return gifup_gifup_app_type_id__volatile;
}



