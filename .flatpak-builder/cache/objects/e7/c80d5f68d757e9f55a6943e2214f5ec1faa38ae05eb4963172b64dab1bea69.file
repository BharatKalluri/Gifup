/* BasicOptions.c generated by valac 0.40.3, the Vala compiler
 * generated from BasicOptions.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>


#define GIFUP_TYPE_BASIC_OPTIONS (gifup_basic_options_get_type ())
#define GIFUP_BASIC_OPTIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIFUP_TYPE_BASIC_OPTIONS, GifupBasicOptions))
#define GIFUP_BASIC_OPTIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GIFUP_TYPE_BASIC_OPTIONS, GifupBasicOptionsClass))
#define GIFUP_IS_BASIC_OPTIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIFUP_TYPE_BASIC_OPTIONS))
#define GIFUP_IS_BASIC_OPTIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GIFUP_TYPE_BASIC_OPTIONS))
#define GIFUP_BASIC_OPTIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GIFUP_TYPE_BASIC_OPTIONS, GifupBasicOptionsClass))

typedef struct _GifupBasicOptions GifupBasicOptions;
typedef struct _GifupBasicOptionsClass GifupBasicOptionsClass;
typedef struct _GifupBasicOptionsPrivate GifupBasicOptionsPrivate;
enum  {
	GIFUP_BASIC_OPTIONS_0_PROPERTY,
	GIFUP_BASIC_OPTIONS_NUM_PROPERTIES
};
static GParamSpec* gifup_basic_options_properties[GIFUP_BASIC_OPTIONS_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

struct _GifupBasicOptions {
	GtkGrid parent_instance;
	GifupBasicOptionsPrivate * priv;
	GtkEntry* entry_start;
	GtkEntry* entry_end;
	gchar* selected_file;
};

struct _GifupBasicOptionsClass {
	GtkGridClass parent_class;
};

struct _GifupBasicOptionsPrivate {
	GtkImage* image_start;
	GtkImage* image_end;
};


static gpointer gifup_basic_options_parent_class = NULL;

GType gifup_basic_options_get_type (void) G_GNUC_CONST;
#define GIFUP_BASIC_OPTIONS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GIFUP_TYPE_BASIC_OPTIONS, GifupBasicOptionsPrivate))
GifupBasicOptions* gifup_basic_options_new (void);
GifupBasicOptions* gifup_basic_options_construct (GType object_type);
GtkLabel* gifup_utils_create_left_label (const gchar* text);
static void __lambda4_ (GifupBasicOptions* self);
void gifup_utils_frame_picture (const gchar* selected_file,
                                const gchar* frame_number,
                                const gchar* file_name,
                                GtkImage* image_widget);
static void ___lambda4__gtk_entry_activate (GtkEntry* _sender,
                                     gpointer self);
static void __lambda6_ (GifupBasicOptions* self);
static void ___lambda6__gtk_entry_activate (GtkEntry* _sender,
                                     gpointer self);
static void gifup_basic_options_finalize (GObject * obj);


static void
__lambda4_ (GifupBasicOptions* self)
{
	const gchar* _tmp0_;
	GtkEntry* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	GtkImage* _tmp4_;
#line 37 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp0_ = self->selected_file;
#line 37 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp1_ = self->entry_start;
#line 37 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp2_ = gtk_entry_get_text (_tmp1_);
#line 37 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp3_ = _tmp2_;
#line 37 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp4_ = self->priv->image_start;
#line 37 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gifup_utils_frame_picture (_tmp0_, _tmp3_, "gifup_start", _tmp4_);
#line 91 "BasicOptions.c"
}


static void
___lambda4__gtk_entry_activate (GtkEntry* _sender,
                                gpointer self)
{
#line 36 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	__lambda4_ ((GifupBasicOptions*) self);
#line 101 "BasicOptions.c"
}


static void
__lambda6_ (GifupBasicOptions* self)
{
	const gchar* _tmp0_;
	GtkEntry* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	GtkImage* _tmp4_;
#line 40 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp0_ = self->selected_file;
#line 40 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp1_ = self->entry_end;
#line 40 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp2_ = gtk_entry_get_text (_tmp1_);
#line 40 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp3_ = _tmp2_;
#line 40 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp4_ = self->priv->image_end;
#line 40 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gifup_utils_frame_picture (_tmp0_, _tmp3_, "gifup_end", _tmp4_);
#line 125 "BasicOptions.c"
}


static void
___lambda6__gtk_entry_activate (GtkEntry* _sender,
                                gpointer self)
{
#line 39 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	__lambda6_ ((GifupBasicOptions*) self);
#line 135 "BasicOptions.c"
}


GifupBasicOptions*
gifup_basic_options_construct (GType object_type)
{
	GifupBasicOptions * self = NULL;
	GtkEntry* _tmp0_;
	GtkLabel* _tmp1_;
	GtkLabel* _tmp2_;
	GtkEntry* _tmp3_;
	GtkEntry* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
	GtkEntry* _tmp7_;
	GtkImage* _tmp8_;
	GtkImage* _tmp9_;
	GtkImage* _tmp10_;
	GtkImage* _tmp11_;
	GtkEntry* _tmp12_;
	GtkEntry* _tmp13_;
#line 11 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	self = (GifupBasicOptions*) g_object_new (object_type, NULL);
#line 14 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gtk_grid_set_column_spacing ((GtkGrid*) self, 12);
#line 15 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gtk_grid_set_row_spacing ((GtkGrid*) self, 6);
#line 16 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gtk_widget_set_margin_start ((GtkWidget*) self, 12);
#line 17 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gtk_widget_set_margin_end ((GtkWidget*) self, 12);
#line 20 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp0_ = (GtkEntry*) gtk_entry_new ();
#line 20 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	g_object_ref_sink (_tmp0_);
#line 20 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_object_unref0 (self->entry_start);
#line 20 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	self->entry_start = _tmp0_;
#line 21 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp1_ = gifup_utils_create_left_label (_ ("Start Time (hh:mm:ss):"));
#line 21 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp2_ = _tmp1_;
#line 21 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp2_, 0, 1, 1, 1);
#line 21 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_object_unref0 (_tmp2_);
#line 22 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp3_ = self->entry_start;
#line 22 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp3_, 1, 1, 1, 1);
#line 24 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp4_ = (GtkEntry*) gtk_entry_new ();
#line 24 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	g_object_ref_sink (_tmp4_);
#line 24 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_object_unref0 (self->entry_end);
#line 24 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	self->entry_end = _tmp4_;
#line 25 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp5_ = gifup_utils_create_left_label (_ ("End Time (hh:mm:ss):"));
#line 25 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp6_ = _tmp5_;
#line 25 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp6_, 0, 2, 1, 1);
#line 25 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_object_unref0 (_tmp6_);
#line 26 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp7_ = self->entry_end;
#line 26 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp7_, 1, 2, 1, 1);
#line 29 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp8_ = (GtkImage*) gtk_image_new ();
#line 29 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	g_object_ref_sink (_tmp8_);
#line 29 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_object_unref0 (self->priv->image_start);
#line 29 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	self->priv->image_start = _tmp8_;
#line 30 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp9_ = self->priv->image_start;
#line 30 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp9_, 0, 3, 1, 1);
#line 32 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp10_ = (GtkImage*) gtk_image_new ();
#line 32 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	g_object_ref_sink (_tmp10_);
#line 32 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_object_unref0 (self->priv->image_end);
#line 32 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	self->priv->image_end = _tmp10_;
#line 33 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp11_ = self->priv->image_end;
#line 33 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp11_, 1, 3, 1, 1);
#line 36 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp12_ = self->entry_start;
#line 36 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	g_signal_connect_object (_tmp12_, "activate", (GCallback) ___lambda4__gtk_entry_activate, self, 0);
#line 39 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_tmp13_ = self->entry_end;
#line 39 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	g_signal_connect_object (_tmp13_, "activate", (GCallback) ___lambda6__gtk_entry_activate, self, 0);
#line 11 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	return self;
#line 241 "BasicOptions.c"
}


GifupBasicOptions*
gifup_basic_options_new (void)
{
#line 11 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	return gifup_basic_options_construct (GIFUP_TYPE_BASIC_OPTIONS);
#line 250 "BasicOptions.c"
}


static void
gifup_basic_options_class_init (GifupBasicOptionsClass * klass)
{
#line 4 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	gifup_basic_options_parent_class = g_type_class_peek_parent (klass);
#line 4 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	g_type_class_add_private (klass, sizeof (GifupBasicOptionsPrivate));
#line 4 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	G_OBJECT_CLASS (klass)->finalize = gifup_basic_options_finalize;
#line 263 "BasicOptions.c"
}


static void
gifup_basic_options_instance_init (GifupBasicOptions * self)
{
#line 4 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	self->priv = GIFUP_BASIC_OPTIONS_GET_PRIVATE (self);
#line 272 "BasicOptions.c"
}


static void
gifup_basic_options_finalize (GObject * obj)
{
	GifupBasicOptions * self;
#line 4 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GIFUP_TYPE_BASIC_OPTIONS, GifupBasicOptions);
#line 6 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_object_unref0 (self->entry_start);
#line 7 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_object_unref0 (self->entry_end);
#line 8 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_object_unref0 (self->priv->image_start);
#line 9 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_object_unref0 (self->priv->image_end);
#line 10 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	_g_free0 (self->selected_file);
#line 4 "/run/build/gifup/src/Widgets/BasicOptions.vala"
	G_OBJECT_CLASS (gifup_basic_options_parent_class)->finalize (obj);
#line 294 "BasicOptions.c"
}


GType
gifup_basic_options_get_type (void)
{
	static volatile gsize gifup_basic_options_type_id__volatile = 0;
	if (g_once_init_enter (&gifup_basic_options_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (GifupBasicOptionsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gifup_basic_options_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GifupBasicOptions), 0, (GInstanceInitFunc) gifup_basic_options_instance_init, NULL };
		GType gifup_basic_options_type_id;
		gifup_basic_options_type_id = g_type_register_static (gtk_grid_get_type (), "GifupBasicOptions", &g_define_type_info, 0);
		g_once_init_leave (&gifup_basic_options_type_id__volatile, gifup_basic_options_type_id);
	}
	return gifup_basic_options_type_id__volatile;
}



