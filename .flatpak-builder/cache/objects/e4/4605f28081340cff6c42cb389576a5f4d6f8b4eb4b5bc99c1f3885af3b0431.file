/* Window.c generated by valac 0.40.3, the Vala compiler
 * generated from Window.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>


#define GIFUP_TYPE_WINDOW (gifup_window_get_type ())
#define GIFUP_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIFUP_TYPE_WINDOW, GifupWindow))
#define GIFUP_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GIFUP_TYPE_WINDOW, GifupWindowClass))
#define GIFUP_IS_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIFUP_TYPE_WINDOW))
#define GIFUP_IS_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GIFUP_TYPE_WINDOW))
#define GIFUP_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GIFUP_TYPE_WINDOW, GifupWindowClass))

typedef struct _GifupWindow GifupWindow;
typedef struct _GifupWindowClass GifupWindowClass;
typedef struct _GifupWindowPrivate GifupWindowPrivate;

#define GIFUP_TYPE_ADVANCE_OPTIONS (gifup_advance_options_get_type ())
#define GIFUP_ADVANCE_OPTIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIFUP_TYPE_ADVANCE_OPTIONS, GifupAdvanceOptions))
#define GIFUP_ADVANCE_OPTIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GIFUP_TYPE_ADVANCE_OPTIONS, GifupAdvanceOptionsClass))
#define GIFUP_IS_ADVANCE_OPTIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIFUP_TYPE_ADVANCE_OPTIONS))
#define GIFUP_IS_ADVANCE_OPTIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GIFUP_TYPE_ADVANCE_OPTIONS))
#define GIFUP_ADVANCE_OPTIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GIFUP_TYPE_ADVANCE_OPTIONS, GifupAdvanceOptionsClass))

typedef struct _GifupAdvanceOptions GifupAdvanceOptions;
typedef struct _GifupAdvanceOptionsClass GifupAdvanceOptionsClass;

#define GIFUP_TYPE_BASIC_OPTIONS (gifup_basic_options_get_type ())
#define GIFUP_BASIC_OPTIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GIFUP_TYPE_BASIC_OPTIONS, GifupBasicOptions))
#define GIFUP_BASIC_OPTIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GIFUP_TYPE_BASIC_OPTIONS, GifupBasicOptionsClass))
#define GIFUP_IS_BASIC_OPTIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GIFUP_TYPE_BASIC_OPTIONS))
#define GIFUP_IS_BASIC_OPTIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GIFUP_TYPE_BASIC_OPTIONS))
#define GIFUP_BASIC_OPTIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GIFUP_TYPE_BASIC_OPTIONS, GifupBasicOptionsClass))

typedef struct _GifupBasicOptions GifupBasicOptions;
typedef struct _GifupBasicOptionsClass GifupBasicOptionsClass;
enum  {
	GIFUP_WINDOW_0_PROPERTY,
	GIFUP_WINDOW_NUM_PROPERTIES
};
static GParamSpec* gifup_window_properties[GIFUP_WINDOW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _GifupBasicOptionsPrivate GifupBasicOptionsPrivate;
typedef struct _GifupAdvanceOptionsPrivate GifupAdvanceOptionsPrivate;

struct _GifupWindow {
	GtkWindow parent_instance;
	GifupWindowPrivate * priv;
	GtkButton* gif_button;
	GtkButton* complete_gif;
	GtkFileChooserButton* file_button;
	GtkSpinner* spinner;
	gchar* selected_file;
};

struct _GifupWindowClass {
	GtkWindowClass parent_class;
};

struct _GifupWindowPrivate {
	GtkGrid* grid;
	GifupAdvanceOptions* grid_advance;
	GifupBasicOptions* grid_basic;
};

struct _GifupBasicOptions {
	GtkGrid parent_instance;
	GifupBasicOptionsPrivate * priv;
	GtkEntry* entry_start;
	GtkEntry* entry_end;
	gchar* selected_file;
};

struct _GifupBasicOptionsClass {
	GtkGridClass parent_class;
};

struct _GifupAdvanceOptions {
	GtkGrid parent_instance;
	GifupAdvanceOptionsPrivate * priv;
	GtkSpinButton* entry_width;
	GtkSpinButton* entry_height;
	GtkSpinButton* entry_fps;
};

struct _GifupAdvanceOptionsClass {
	GtkGridClass parent_class;
};


static gpointer gifup_window_parent_class = NULL;

GType gifup_window_get_type (void) G_GNUC_CONST;
GType gifup_advance_options_get_type (void) G_GNUC_CONST;
GType gifup_basic_options_get_type (void) G_GNUC_CONST;
#define GIFUP_WINDOW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GIFUP_TYPE_WINDOW, GifupWindowPrivate))
GifupWindow* gifup_window_new (void);
GifupWindow* gifup_window_construct (GType object_type);
static void gifup_window_build_ui (GifupWindow* self);
static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                        gpointer self);
static void __lambda7_ (GifupWindow* self);
static void ___lambda7__gtk_file_chooser_selection_changed (GtkFileChooser* _sender,
                                                     gpointer self);
GifupBasicOptions* gifup_basic_options_new (void);
GifupBasicOptions* gifup_basic_options_construct (GType object_type);
GifupAdvanceOptions* gifup_advance_options_new (void);
GifupAdvanceOptions* gifup_advance_options_construct (GType object_type);
GtkLabel* gifup_utils_create_left_label (const gchar* text);
static void __lambda8_ (GifupWindow* self);
void gifup_utils_gif_create (const gchar* selected_file,
                             GtkEntry* entry_end,
                             GtkEntry* entry_start,
                             GtkSpinButton* entry_fps,
                             GtkSpinButton* entry_height,
                             GtkSpinButton* entry_width,
                             GtkSpinner* spinner);
static void ___lambda8__gtk_button_clicked (GtkButton* _sender,
                                     gpointer self);
static void __lambda10_ (GifupWindow* self);
void gifup_utils_complete_gif_create (const gchar* selected_file,
                                      GtkSpinButton* entry_fps,
                                      GtkSpinButton* entry_height,
                                      GtkSpinButton* entry_width,
                                      GtkSpinner* spinner);
static void ___lambda10__gtk_button_clicked (GtkButton* _sender,
                                      gpointer self);
static void gifup_window_finalize (GObject * obj);


static void
_gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                   gpointer self)
{
#line 30 "/run/build/gifup/src/Window.vala"
	gtk_main_quit ();
#line 146 "Window.c"
}


GifupWindow*
gifup_window_construct (GType object_type)
{
	GifupWindow * self = NULL;
	GtkSettings* _tmp0_;
	GtkHeaderBar* headerbar = NULL;
	GtkHeaderBar* _tmp1_;
	GtkStyleContext* _tmp2_;
#line 16 "/run/build/gifup/src/Window.vala"
	self = (GifupWindow*) g_object_new (object_type, NULL);
#line 17 "/run/build/gifup/src/Window.vala"
	_tmp0_ = gtk_settings_get_default ();
#line 17 "/run/build/gifup/src/Window.vala"
	g_object_set (_tmp0_, "gtk-application-prefer-dark-theme", TRUE, NULL);
#line 18 "/run/build/gifup/src/Window.vala"
	gtk_window_set_resizable ((GtkWindow*) self, FALSE);
#line 19 "/run/build/gifup/src/Window.vala"
	g_object_set ((GtkWindow*) self, "window-position", GTK_WIN_POS_CENTER, NULL);
#line 22 "/run/build/gifup/src/Window.vala"
	_tmp1_ = (GtkHeaderBar*) gtk_header_bar_new ();
#line 22 "/run/build/gifup/src/Window.vala"
	g_object_ref_sink (_tmp1_);
#line 22 "/run/build/gifup/src/Window.vala"
	headerbar = _tmp1_;
#line 23 "/run/build/gifup/src/Window.vala"
	gtk_header_bar_set_title (headerbar, "Gifup");
#line 24 "/run/build/gifup/src/Window.vala"
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) headerbar);
#line 24 "/run/build/gifup/src/Window.vala"
	gtk_style_context_add_class (_tmp2_, GTK_STYLE_CLASS_FLAT);
#line 25 "/run/build/gifup/src/Window.vala"
	gtk_header_bar_set_show_close_button (headerbar, TRUE);
#line 26 "/run/build/gifup/src/Window.vala"
	gtk_window_set_titlebar ((GtkWindow*) self, (GtkWidget*) headerbar);
#line 28 "/run/build/gifup/src/Window.vala"
	gifup_window_build_ui (self);
#line 30 "/run/build/gifup/src/Window.vala"
	g_signal_connect ((GtkWidget*) self, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
#line 31 "/run/build/gifup/src/Window.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 33 "/run/build/gifup/src/Window.vala"
	gtk_main ();
#line 16 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (headerbar);
#line 16 "/run/build/gifup/src/Window.vala"
	return self;
#line 196 "Window.c"
}


GifupWindow*
gifup_window_new (void)
{
#line 16 "/run/build/gifup/src/Window.vala"
	return gifup_window_construct (GIFUP_TYPE_WINDOW);
#line 205 "Window.c"
}


static void
__lambda7_ (GifupWindow* self)
{
	GtkFileChooserButton* _tmp0_;
	gchar* _tmp1_;
	GifupBasicOptions* _tmp2_;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	GtkButton* _tmp5_;
	GtkButton* _tmp6_;
#line 51 "/run/build/gifup/src/Window.vala"
	_tmp0_ = self->file_button;
#line 51 "/run/build/gifup/src/Window.vala"
	_tmp1_ = gtk_file_chooser_get_uri ((GtkFileChooser*) _tmp0_);
#line 51 "/run/build/gifup/src/Window.vala"
	_g_free0 (self->selected_file);
#line 51 "/run/build/gifup/src/Window.vala"
	self->selected_file = _tmp1_;
#line 52 "/run/build/gifup/src/Window.vala"
	_tmp2_ = self->priv->grid_basic;
#line 52 "/run/build/gifup/src/Window.vala"
	_tmp3_ = self->selected_file;
#line 52 "/run/build/gifup/src/Window.vala"
	_tmp4_ = g_strdup (_tmp3_);
#line 52 "/run/build/gifup/src/Window.vala"
	_g_free0 (_tmp2_->selected_file);
#line 52 "/run/build/gifup/src/Window.vala"
	_tmp2_->selected_file = _tmp4_;
#line 53 "/run/build/gifup/src/Window.vala"
	_tmp5_ = self->gif_button;
#line 53 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp5_, TRUE);
#line 54 "/run/build/gifup/src/Window.vala"
	_tmp6_ = self->complete_gif;
#line 54 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp6_, TRUE);
#line 245 "Window.c"
}


static void
___lambda7__gtk_file_chooser_selection_changed (GtkFileChooser* _sender,
                                                gpointer self)
{
#line 50 "/run/build/gifup/src/Window.vala"
	__lambda7_ ((GifupWindow*) self);
#line 255 "Window.c"
}


static void
__lambda8_ (GifupWindow* self)
{
	const gchar* _tmp0_;
	GifupBasicOptions* _tmp1_;
	GtkEntry* _tmp2_;
	GifupBasicOptions* _tmp3_;
	GtkEntry* _tmp4_;
	GifupAdvanceOptions* _tmp5_;
	GtkSpinButton* _tmp6_;
	GifupAdvanceOptions* _tmp7_;
	GtkSpinButton* _tmp8_;
	GifupAdvanceOptions* _tmp9_;
	GtkSpinButton* _tmp10_;
	GtkSpinner* _tmp11_;
	GtkSpinner* _tmp12_;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp0_ = self->selected_file;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp1_ = self->priv->grid_basic;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp2_ = _tmp1_->entry_end;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp3_ = self->priv->grid_basic;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp4_ = _tmp3_->entry_start;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp5_ = self->priv->grid_advance;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp6_ = _tmp5_->entry_fps;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp7_ = self->priv->grid_advance;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp8_ = _tmp7_->entry_height;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp9_ = self->priv->grid_advance;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp10_ = _tmp9_->entry_width;
#line 93 "/run/build/gifup/src/Window.vala"
	_tmp11_ = self->spinner;
#line 93 "/run/build/gifup/src/Window.vala"
	gifup_utils_gif_create (_tmp0_, _tmp2_, _tmp4_, _tmp6_, _tmp8_, _tmp10_, _tmp11_);
#line 94 "/run/build/gifup/src/Window.vala"
	_tmp12_ = self->spinner;
#line 94 "/run/build/gifup/src/Window.vala"
	g_object_set (_tmp12_, "active", TRUE, NULL);
#line 305 "Window.c"
}


static void
___lambda8__gtk_button_clicked (GtkButton* _sender,
                                gpointer self)
{
#line 92 "/run/build/gifup/src/Window.vala"
	__lambda8_ ((GifupWindow*) self);
#line 315 "Window.c"
}


static void
__lambda10_ (GifupWindow* self)
{
	const gchar* _tmp0_;
	GifupAdvanceOptions* _tmp1_;
	GtkSpinButton* _tmp2_;
	GifupAdvanceOptions* _tmp3_;
	GtkSpinButton* _tmp4_;
	GifupAdvanceOptions* _tmp5_;
	GtkSpinButton* _tmp6_;
	GtkSpinner* _tmp7_;
	GtkSpinner* _tmp8_;
#line 106 "/run/build/gifup/src/Window.vala"
	_tmp0_ = self->selected_file;
#line 106 "/run/build/gifup/src/Window.vala"
	_tmp1_ = self->priv->grid_advance;
#line 106 "/run/build/gifup/src/Window.vala"
	_tmp2_ = _tmp1_->entry_fps;
#line 106 "/run/build/gifup/src/Window.vala"
	_tmp3_ = self->priv->grid_advance;
#line 106 "/run/build/gifup/src/Window.vala"
	_tmp4_ = _tmp3_->entry_height;
#line 106 "/run/build/gifup/src/Window.vala"
	_tmp5_ = self->priv->grid_advance;
#line 106 "/run/build/gifup/src/Window.vala"
	_tmp6_ = _tmp5_->entry_width;
#line 106 "/run/build/gifup/src/Window.vala"
	_tmp7_ = self->spinner;
#line 106 "/run/build/gifup/src/Window.vala"
	gifup_utils_complete_gif_create (_tmp0_, _tmp2_, _tmp4_, _tmp6_, _tmp7_);
#line 107 "/run/build/gifup/src/Window.vala"
	_tmp8_ = self->spinner;
#line 107 "/run/build/gifup/src/Window.vala"
	g_object_set (_tmp8_, "active", TRUE, NULL);
#line 353 "Window.c"
}


static void
___lambda10__gtk_button_clicked (GtkButton* _sender,
                                 gpointer self)
{
#line 105 "/run/build/gifup/src/Window.vala"
	__lambda10_ ((GifupWindow*) self);
#line 363 "Window.c"
}


static void
gifup_window_build_ui (GifupWindow* self)
{
	GtkGrid* _tmp0_;
	GtkGrid* _tmp1_;
	GtkGrid* _tmp2_;
	GtkGrid* _tmp3_;
	GtkGrid* _tmp4_;
	GtkFileChooserButton* _tmp5_;
	GtkFileChooserButton* _tmp6_;
	GtkFileChooserButton* _tmp7_;
	GtkFileChooserButton* _tmp8_;
	GtkGrid* _tmp9_;
	GtkFileChooserButton* _tmp10_;
	GtkFileChooserButton* _tmp11_;
	GtkStack* stack = NULL;
	GtkStack* _tmp12_;
	GifupBasicOptions* _tmp13_;
	GifupBasicOptions* _tmp14_;
	GifupAdvanceOptions* _tmp15_;
	GifupAdvanceOptions* _tmp16_;
	GtkStackSwitcher* stack_switcher = NULL;
	GtkStackSwitcher* _tmp17_;
	GtkGrid* _tmp18_;
	GtkGrid* _tmp19_;
	GtkSpinner* _tmp20_;
	GtkGrid* _tmp21_;
	GtkSpinner* _tmp22_;
	GtkLabel* tip_label = NULL;
	GtkLabel* _tmp23_;
	GtkGrid* _tmp24_;
	GtkButton* _tmp25_;
	GtkButton* _tmp26_;
	GtkStyleContext* _tmp27_;
	GtkButton* _tmp28_;
	GtkButton* _tmp29_;
	GtkButton* _tmp30_;
	GtkGrid* _tmp31_;
	GtkButton* _tmp32_;
	GtkButton* _tmp33_;
	GtkButton* _tmp34_;
	GtkButton* _tmp35_;
	GtkStyleContext* _tmp36_;
	GtkButton* _tmp37_;
	GtkButton* _tmp38_;
	GtkButton* _tmp39_;
	GtkButton* _tmp40_;
	GtkGrid* _tmp41_;
	GtkButton* _tmp42_;
	GtkButton* _tmp43_;
	GtkGrid* _tmp44_;
#line 36 "/run/build/gifup/src/Window.vala"
	g_return_if_fail (self != NULL);
#line 37 "/run/build/gifup/src/Window.vala"
	_tmp0_ = (GtkGrid*) gtk_grid_new ();
#line 37 "/run/build/gifup/src/Window.vala"
	g_object_ref_sink (_tmp0_);
#line 37 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->priv->grid);
#line 37 "/run/build/gifup/src/Window.vala"
	self->priv->grid = _tmp0_;
#line 38 "/run/build/gifup/src/Window.vala"
	_tmp1_ = self->priv->grid;
#line 38 "/run/build/gifup/src/Window.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp1_, GTK_ORIENTATION_VERTICAL);
#line 39 "/run/build/gifup/src/Window.vala"
	_tmp2_ = self->priv->grid;
#line 39 "/run/build/gifup/src/Window.vala"
	gtk_grid_set_column_spacing (_tmp2_, 6);
#line 40 "/run/build/gifup/src/Window.vala"
	_tmp3_ = self->priv->grid;
#line 40 "/run/build/gifup/src/Window.vala"
	gtk_grid_set_row_spacing (_tmp3_, 12);
#line 41 "/run/build/gifup/src/Window.vala"
	_tmp4_ = self->priv->grid;
#line 41 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp4_, TRUE);
#line 44 "/run/build/gifup/src/Window.vala"
	_tmp5_ = (GtkFileChooserButton*) gtk_file_chooser_button_new ("Open your favourite file", GTK_FILE_CHOOSER_ACTION_OPEN);
#line 44 "/run/build/gifup/src/Window.vala"
	g_object_ref_sink (_tmp5_);
#line 44 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->file_button);
#line 44 "/run/build/gifup/src/Window.vala"
	self->file_button = _tmp5_;
#line 45 "/run/build/gifup/src/Window.vala"
	_tmp6_ = self->file_button;
#line 45 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp6_, 10);
#line 46 "/run/build/gifup/src/Window.vala"
	_tmp7_ = self->file_button;
#line 46 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp7_, 10);
#line 47 "/run/build/gifup/src/Window.vala"
	_tmp8_ = self->file_button;
#line 47 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp8_, 10);
#line 48 "/run/build/gifup/src/Window.vala"
	_tmp9_ = self->priv->grid;
#line 48 "/run/build/gifup/src/Window.vala"
	_tmp10_ = self->file_button;
#line 48 "/run/build/gifup/src/Window.vala"
	gtk_container_add ((GtkContainer*) _tmp9_, (GtkWidget*) _tmp10_);
#line 50 "/run/build/gifup/src/Window.vala"
	_tmp11_ = self->file_button;
#line 50 "/run/build/gifup/src/Window.vala"
	g_signal_connect_object ((GtkFileChooser*) _tmp11_, "selection-changed", (GCallback) ___lambda7__gtk_file_chooser_selection_changed, self, 0);
#line 58 "/run/build/gifup/src/Window.vala"
	_tmp12_ = (GtkStack*) gtk_stack_new ();
#line 58 "/run/build/gifup/src/Window.vala"
	g_object_ref_sink (_tmp12_);
#line 58 "/run/build/gifup/src/Window.vala"
	stack = _tmp12_;
#line 59 "/run/build/gifup/src/Window.vala"
	gtk_stack_set_transition_type (stack, GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT);
#line 61 "/run/build/gifup/src/Window.vala"
	_tmp13_ = gifup_basic_options_new ();
#line 61 "/run/build/gifup/src/Window.vala"
	g_object_ref_sink (_tmp13_);
#line 61 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->priv->grid_basic);
#line 61 "/run/build/gifup/src/Window.vala"
	self->priv->grid_basic = _tmp13_;
#line 62 "/run/build/gifup/src/Window.vala"
	_tmp14_ = self->priv->grid_basic;
#line 62 "/run/build/gifup/src/Window.vala"
	gtk_stack_add_titled (stack, (GtkWidget*) _tmp14_, "Basic", _ ("Basic Options"));
#line 63 "/run/build/gifup/src/Window.vala"
	_tmp15_ = gifup_advance_options_new ();
#line 63 "/run/build/gifup/src/Window.vala"
	g_object_ref_sink (_tmp15_);
#line 63 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->priv->grid_advance);
#line 63 "/run/build/gifup/src/Window.vala"
	self->priv->grid_advance = _tmp15_;
#line 64 "/run/build/gifup/src/Window.vala"
	_tmp16_ = self->priv->grid_advance;
#line 64 "/run/build/gifup/src/Window.vala"
	gtk_stack_add_titled (stack, (GtkWidget*) _tmp16_, "Advanced", _ ("Advanced Options"));
#line 66 "/run/build/gifup/src/Window.vala"
	_tmp17_ = (GtkStackSwitcher*) gtk_stack_switcher_new ();
#line 66 "/run/build/gifup/src/Window.vala"
	g_object_ref_sink (_tmp17_);
#line 66 "/run/build/gifup/src/Window.vala"
	stack_switcher = _tmp17_;
#line 67 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_halign ((GtkWidget*) stack_switcher, GTK_ALIGN_CENTER);
#line 68 "/run/build/gifup/src/Window.vala"
	gtk_stack_switcher_set_stack (stack_switcher, stack);
#line 70 "/run/build/gifup/src/Window.vala"
	_tmp18_ = self->priv->grid;
#line 70 "/run/build/gifup/src/Window.vala"
	gtk_container_add ((GtkContainer*) _tmp18_, (GtkWidget*) stack_switcher);
#line 71 "/run/build/gifup/src/Window.vala"
	_tmp19_ = self->priv->grid;
#line 71 "/run/build/gifup/src/Window.vala"
	gtk_container_add ((GtkContainer*) _tmp19_, (GtkWidget*) stack);
#line 74 "/run/build/gifup/src/Window.vala"
	_tmp20_ = (GtkSpinner*) gtk_spinner_new ();
#line 74 "/run/build/gifup/src/Window.vala"
	g_object_ref_sink (_tmp20_);
#line 74 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->spinner);
#line 74 "/run/build/gifup/src/Window.vala"
	self->spinner = _tmp20_;
#line 75 "/run/build/gifup/src/Window.vala"
	_tmp21_ = self->priv->grid;
#line 75 "/run/build/gifup/src/Window.vala"
	_tmp22_ = self->spinner;
#line 75 "/run/build/gifup/src/Window.vala"
	gtk_container_add ((GtkContainer*) _tmp21_, (GtkWidget*) _tmp22_);
#line 78 "/run/build/gifup/src/Window.vala"
	_tmp23_ = gifup_utils_create_left_label (_ ("Tip: Click enter after entering time for previews!"));
#line 78 "/run/build/gifup/src/Window.vala"
	tip_label = _tmp23_;
#line 79 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_margin_start ((GtkWidget*) tip_label, 6);
#line 80 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_margin_end ((GtkWidget*) tip_label, 6);
#line 81 "/run/build/gifup/src/Window.vala"
	gtk_label_set_xalign (tip_label, 0.5f);
#line 82 "/run/build/gifup/src/Window.vala"
	_tmp24_ = self->priv->grid;
#line 82 "/run/build/gifup/src/Window.vala"
	gtk_container_add ((GtkContainer*) _tmp24_, (GtkWidget*) tip_label);
#line 85 "/run/build/gifup/src/Window.vala"
	_tmp25_ = (GtkButton*) gtk_button_new_with_label (_ ("Make GIF!"));
#line 85 "/run/build/gifup/src/Window.vala"
	g_object_ref_sink (_tmp25_);
#line 85 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->gif_button);
#line 85 "/run/build/gifup/src/Window.vala"
	self->gif_button = _tmp25_;
#line 86 "/run/build/gifup/src/Window.vala"
	_tmp26_ = self->gif_button;
#line 86 "/run/build/gifup/src/Window.vala"
	_tmp27_ = gtk_widget_get_style_context ((GtkWidget*) _tmp26_);
#line 86 "/run/build/gifup/src/Window.vala"
	gtk_style_context_add_class (_tmp27_, GTK_STYLE_CLASS_SUGGESTED_ACTION);
#line 87 "/run/build/gifup/src/Window.vala"
	_tmp28_ = self->gif_button;
#line 87 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp28_, 12);
#line 88 "/run/build/gifup/src/Window.vala"
	_tmp29_ = self->gif_button;
#line 88 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp29_, 12);
#line 89 "/run/build/gifup/src/Window.vala"
	_tmp30_ = self->gif_button;
#line 89 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp30_, FALSE);
#line 90 "/run/build/gifup/src/Window.vala"
	_tmp31_ = self->priv->grid;
#line 90 "/run/build/gifup/src/Window.vala"
	_tmp32_ = self->gif_button;
#line 90 "/run/build/gifup/src/Window.vala"
	gtk_container_add ((GtkContainer*) _tmp31_, (GtkWidget*) _tmp32_);
#line 92 "/run/build/gifup/src/Window.vala"
	_tmp33_ = self->gif_button;
#line 92 "/run/build/gifup/src/Window.vala"
	g_signal_connect_object (_tmp33_, "clicked", (GCallback) ___lambda8__gtk_button_clicked, self, 0);
#line 97 "/run/build/gifup/src/Window.vala"
	_tmp34_ = (GtkButton*) gtk_button_new_with_label (_ ("Convert Complete Video"));
#line 97 "/run/build/gifup/src/Window.vala"
	g_object_ref_sink (_tmp34_);
#line 97 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->complete_gif);
#line 97 "/run/build/gifup/src/Window.vala"
	self->complete_gif = _tmp34_;
#line 98 "/run/build/gifup/src/Window.vala"
	_tmp35_ = self->complete_gif;
#line 98 "/run/build/gifup/src/Window.vala"
	_tmp36_ = gtk_widget_get_style_context ((GtkWidget*) _tmp35_);
#line 98 "/run/build/gifup/src/Window.vala"
	gtk_style_context_add_class (_tmp36_, GTK_STYLE_CLASS_SUGGESTED_ACTION);
#line 99 "/run/build/gifup/src/Window.vala"
	_tmp37_ = self->complete_gif;
#line 99 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp37_, 12);
#line 100 "/run/build/gifup/src/Window.vala"
	_tmp38_ = self->complete_gif;
#line 100 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp38_, 12);
#line 101 "/run/build/gifup/src/Window.vala"
	_tmp39_ = self->complete_gif;
#line 101 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp39_, 12);
#line 102 "/run/build/gifup/src/Window.vala"
	_tmp40_ = self->complete_gif;
#line 102 "/run/build/gifup/src/Window.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp40_, FALSE);
#line 103 "/run/build/gifup/src/Window.vala"
	_tmp41_ = self->priv->grid;
#line 103 "/run/build/gifup/src/Window.vala"
	_tmp42_ = self->complete_gif;
#line 103 "/run/build/gifup/src/Window.vala"
	gtk_container_add ((GtkContainer*) _tmp41_, (GtkWidget*) _tmp42_);
#line 105 "/run/build/gifup/src/Window.vala"
	_tmp43_ = self->complete_gif;
#line 105 "/run/build/gifup/src/Window.vala"
	g_signal_connect_object (_tmp43_, "clicked", (GCallback) ___lambda10__gtk_button_clicked, self, 0);
#line 110 "/run/build/gifup/src/Window.vala"
	_tmp44_ = self->priv->grid;
#line 110 "/run/build/gifup/src/Window.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp44_);
#line 36 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (tip_label);
#line 36 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (stack_switcher);
#line 36 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (stack);
#line 638 "Window.c"
}


static void
gifup_window_class_init (GifupWindowClass * klass)
{
#line 4 "/run/build/gifup/src/Window.vala"
	gifup_window_parent_class = g_type_class_peek_parent (klass);
#line 4 "/run/build/gifup/src/Window.vala"
	g_type_class_add_private (klass, sizeof (GifupWindowPrivate));
#line 4 "/run/build/gifup/src/Window.vala"
	G_OBJECT_CLASS (klass)->finalize = gifup_window_finalize;
#line 651 "Window.c"
}


static void
gifup_window_instance_init (GifupWindow * self)
{
#line 4 "/run/build/gifup/src/Window.vala"
	self->priv = GIFUP_WINDOW_GET_PRIVATE (self);
#line 660 "Window.c"
}


static void
gifup_window_finalize (GObject * obj)
{
	GifupWindow * self;
#line 4 "/run/build/gifup/src/Window.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GIFUP_TYPE_WINDOW, GifupWindow);
#line 6 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->priv->grid);
#line 7 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->priv->grid_advance);
#line 8 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->priv->grid_basic);
#line 10 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->gif_button);
#line 11 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->complete_gif);
#line 12 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->file_button);
#line 13 "/run/build/gifup/src/Window.vala"
	_g_object_unref0 (self->spinner);
#line 15 "/run/build/gifup/src/Window.vala"
	_g_free0 (self->selected_file);
#line 4 "/run/build/gifup/src/Window.vala"
	G_OBJECT_CLASS (gifup_window_parent_class)->finalize (obj);
#line 688 "Window.c"
}


GType
gifup_window_get_type (void)
{
	static volatile gsize gifup_window_type_id__volatile = 0;
	if (g_once_init_enter (&gifup_window_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (GifupWindowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) gifup_window_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GifupWindow), 0, (GInstanceInitFunc) gifup_window_instance_init, NULL };
		GType gifup_window_type_id;
		gifup_window_type_id = g_type_register_static (gtk_window_get_type (), "GifupWindow", &g_define_type_info, 0);
		g_once_init_leave (&gifup_window_type_id__volatile, gifup_window_type_id);
	}
	return gifup_window_type_id__volatile;
}



